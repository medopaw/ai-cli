use std::env;
use std::fs;
use std::path::Path;

fn main() {
    // Tell cargo to rerun if the default config file changes
    println!("cargo:rerun-if-changed=ai.conf.toml.default");

    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("default_config.rs");

    // Read the default config file
    let default_config_content = fs::read_to_string("ai.conf.toml.default")
        .expect("Failed to read ai.conf.toml.default");

    // Parse the TOML
    let config: toml::Value = toml::from_str(&default_config_content)
        .expect("Failed to parse ai.conf.toml.default");

    // Extract values from the new config format - fail if missing required fields
    let ai_provider = config
        .get("commands")
        .and_then(|c| c.get("git_operations"))
        .and_then(|g| g.get("provider"))
        .and_then(|p| p.as_str())
        .expect("Missing required field: commands.git_operations.provider in ai.conf.toml.default");
    
    let ai_model = config
        .get("commands")
        .and_then(|c| c.get("git_operations"))
        .and_then(|g| g.get("model"))
        .and_then(|m| m.as_str())
        .expect("Missing required field: commands.git_operations.model in ai.conf.toml.default");
    
    // Get base_urls from all providers for default values
    let providers = config.get("providers")
        .and_then(|p| p.as_table())
        .expect("Missing required section: [providers] in ai.conf.toml.default");
    
    let ollama_base_url = providers.get("ollama")
        .and_then(|p| p.get("base_url"))
        .and_then(|b| b.as_str())
        .expect("Missing required field: providers.ollama.base_url in ai.conf.toml.default");
        
    let deepseek_base_url = providers.get("deepseek")
        .and_then(|p| p.get("base_url"))
        .and_then(|b| b.as_str())
        .unwrap_or("https://api.deepseek.com");
    
    let git_commit_prompt = config.get("git")
        .and_then(|g| g.get("commit_prompt"))
        .and_then(|p| p.as_str())
        .expect("Missing required field: git.commit_prompt in ai.conf.toml.default");
    
    let history_enabled = config.get("history")
        .and_then(|h| h.get("enabled"))
        .and_then(|e| e.as_bool())
        .expect("Missing required field: history.enabled in ai.conf.toml.default");

    // Escape the commit prompt for use in Rust string literal
    let escaped_prompt = git_commit_prompt.replace("\\", "\\\\").replace("\"", "\\\"");

    // Generate the code using separate format calls
    let mut generated_code = String::new();
    generated_code.push_str("// This file is generated by build.rs from ai.conf.toml.default\n");
    generated_code.push_str("// DO NOT EDIT MANUALLY\n\n");
    
    generated_code.push_str(&format!("pub const DEFAULT_AI_PROVIDER: &str = \"{}\";\n", ai_provider));
    generated_code.push_str(&format!("pub const DEFAULT_AI_MODEL: &str = \"{}\";\n", ai_model));
    generated_code.push_str(&format!("pub const DEFAULT_OLLAMA_BASE_URL: &str = \"{}\";\n", ollama_base_url));
    generated_code.push_str(&format!("pub const DEFAULT_DEEPSEEK_BASE_URL: &str = \"{}\";\n", deepseek_base_url));
    generated_code.push_str(&format!("pub const DEFAULT_GIT_COMMIT_PROMPT: &str = \"{}\";\n", escaped_prompt));
    generated_code.push_str(&format!("pub const DEFAULT_HISTORY_ENABLED: bool = {};\n", history_enabled));

    // Write the generated code
    fs::write(&dest_path, generated_code)
        .expect("Failed to write generated default config file");
}