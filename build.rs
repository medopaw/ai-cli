use std::env;
use std::fs;
use std::path::Path;

fn main() {
    // Tell cargo to rerun if the default config file changes
    println!("cargo:rerun-if-changed=ai.conf.toml.default");

    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("default_config.rs");

    // Read the default config file
    let default_config_content = fs::read_to_string("ai.conf.toml.default")
        .expect("Failed to read ai.conf.toml.default");

    // Parse the TOML
    let config: toml::Value = toml::from_str(&default_config_content)
        .expect("Failed to parse ai.conf.toml.default");

    // Extract values
    let ai_provider = config["ai"]["provider"].as_str().unwrap_or("ollama");
    let ai_model = config["ai"]["model"].as_str().unwrap_or("qwen2.5:7b");
    let ai_base_url = config["ai"]["base_url"].as_str().unwrap_or("http://localhost:11434");
    let git_commit_prompt = config["git"]["commit_prompt"].as_str().unwrap_or("");
    let history_enabled = config["history"]["enabled"].as_bool().unwrap_or(false);

    // Escape the commit prompt for use in Rust string literal
    let escaped_prompt = git_commit_prompt.replace("\\", "\\\\").replace("\"", "\\\"");

    // Generate the code using separate format calls
    let mut generated_code = String::new();
    generated_code.push_str("// This file is generated by build.rs from ai.conf.toml.default\n");
    generated_code.push_str("// DO NOT EDIT MANUALLY\n\n");
    
    generated_code.push_str(&format!("pub const DEFAULT_AI_PROVIDER: &str = \"{}\";\n", ai_provider));
    generated_code.push_str(&format!("pub const DEFAULT_AI_MODEL: &str = \"{}\";\n", ai_model));
    generated_code.push_str(&format!("pub const DEFAULT_AI_BASE_URL: &str = \"{}\";\n", ai_base_url));
    generated_code.push_str(&format!("pub const DEFAULT_GIT_COMMIT_PROMPT: &str = \"{}\";\n", escaped_prompt));
    generated_code.push_str(&format!("pub const DEFAULT_HISTORY_ENABLED: bool = {};\n", history_enabled));

    // Write the generated code
    fs::write(&dest_path, generated_code)
        .expect("Failed to write generated default config file");
}